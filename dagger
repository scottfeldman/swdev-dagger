#!/usr/bin/env python

from os import getpid
from kcache import *
from rtnetlink import *
import subprocess

class Dagger(KCache):

    def __init__(self):
        KCache.__init__(self, getpid(), filters=self.filters(),
                        notifiers=self.notifiers())

    def run(self, cmd, wait=True):
        print cmd
        p = subprocess.Popen(cmd, shell=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if wait:
            return p.communicate()

    def filter_neigh(self, ndm):
        return ndm.ndm_family != AF_BRIDGE

    def filters(self):
        return {
            RTM_NEWNEIGH: self.filter_neigh,
            RTM_DELNEIGH: self.filter_neigh,
        }

    def lladdr_str(self, lladdr):
        return "%02x:%02x:%02x:%02x:%02x:%02x" % \
               (lladdr[0], lladdr[1], lladdr[2],
                lladdr[3], lladdr[4], lladdr[5])

    def new_route(self, data):
        pass

    def del_route(self, data):
        pass

    def do_neigh(self, neigh, op):
        if neigh.ndm_state & NUD_REACHABLE and neigh.master:
            out_port = self.kcache_ifaces[neigh.ndm_ifindex].ifname
            in_port = self.kcache_ifaces[neigh.master].ifname
            eth_dst = self.lladdr_str(neigh.lladdr)
            for eth_type in ["0800", "86dd"]:
                cmd = "sudo ~/sw %s %s eth_type %s eth_dst %s " \
                      "phy_in_port %s action output %s" % \
                      (out_port, op, eth_type, eth_dst, \
                       in_port, out_port)
                out, err = self.run(cmd)
                print out, err

    def new_neigh(self, data):
        ifindex, neigh = data
        self.do_neigh(neigh, "flow_insert")

    def del_neigh(self, data):
        ifindex, neigh = data
        self.do_neigh(neigh, "flow_remove")

    def notifiers(self):
        return {
            RTM_NEWROUTE: self.new_route,
            RTM_DELROUTE: self.del_route,
            RTM_NEWNEIGH: self.new_neigh,
            RTM_DELNEIGH: self.del_neigh,
        }

dagger = Dagger()
dagger.process_forever()
